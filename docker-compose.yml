version: "3.9"

services:
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # S3 api
      - "9001:9001"  # console
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [ tinylake ]

  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 minio minio123 &&
      mc mb -p local/iceberg || true &&
      mc ls local &&
      sleep 2
      "
    networks: [ tinylake ]

  nessie:
    image: ghcr.io/projectnessie/nessie:latest
    container_name: nessie
    environment:
      QUARKUS_HTTP_PORT: "19120"
      QUARKUS_HTTP_HOST: "0.0.0.0"
    ports:
      - "19120:19120"
    volumes:
      - nessie_data:/var/lib/nessie
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19120/api/v2/config"]
      interval: 5s
      timeout: 3s
      retries: 40
    networks: [ tinylake ]

  spark-master:
    image: bitnami/spark:3.5.1
    container_name: spark-master
    environment:
      SPARK_MODE: master
      SPARK_MASTER_PORT: "7077"
      SPARK_MASTER_WEBUI_PORT: "8080"
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
    ports:
      - "8080:8080"  # Spark Master UI
      - "7077:7077"  # Spark Master RPC
    volumes:
      - ./spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf:ro
    depends_on:
      - minio
      - minio-init
      - nessie
    networks: [ tinylake ]

  spark-worker:
    image: bitnami/spark:3.5.1
    container_name: spark-worker
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 2G
      SPARK_WORKER_CORES: "2"
      AWS_ACCESS_KEY_IDM: minio
      AWS_SECRET_ACCESS_KEY: minio123
    ports:
      - "8081:8081"  # Spark Worker UI
    volumes:
      - ./spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf:ro
    depends_on:
      - spark-master
    networks: [ tinylake ]

volumes:
  minio_data:
  nessie_data:

networks:
  tinylake:
    driver: bridge

