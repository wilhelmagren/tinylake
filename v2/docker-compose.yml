networks:
  tinylake:
    driver: bridge

volumes:
  minio_data:
  doris_fe_meta:
  doris_fe_log:
  doris_be_storage:
  doris_be_log:

services:
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Console UI
    volumes:
      - minio_data:/data
    networks: [ tinylake ]

  minio-mc:
    image: minio/mc:latest
    container_name: minio-mc
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "
      until (mc alias set local http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD) do sleep 1; done &&
      mc mb -p local/warehouse || true
      "
    networks: [ tinylake ]
    restart: "no"

  nessie:
    image: ghcr.io/projectnessie/nessie:latest
    container_name: nessie
    depends_on:
      - minio
      - minio-mc
    environment:
      # Default warehouse named 'main' points at s3://warehouse on MinIO
      NESSIE_CATALOG_DEFAULT_WAREHOUSE: main
      NESSIE_CATALOG_WAREHOUSES_MAIN_LOCATION: s3://warehouse
      NESSIE_CATALOG_SERVICE_S3_DEFAULT_OPTIONS_ENDPOINT: http://minio:9000
      NESSIE_CATALOG_SERVICE_S3_DEFAULT_OPTIONS_PATH_STYLE_ACCESS: true
      NESSIE_CATALOG_SERVICE_S3_DEFAULT_OPTIONS_REGION: eu-north-1
      NESSIE_CATALOG_SERVICE_S3_DEFAULT_OPTIONS_AUTH_STYLE: STATIC
      NESSIE_CATALOG_SERVICE_S3_DEFAULT_OPTIONS_ACCESS_KEY: minio
      NESSIE_CATALOG_SERVICE_S3_DEFAULT_OPTIONS_SECRET_KEY: minio123
      QUARKUS_HTTP_PORT: "19120"
    ports:
      - "19120:19120"  # REST + UI
    networks: [ tinylake ]

  spark-master:
    image: bitnami/spark:3.5.1
    container_name: spark-master
    environment:
      SPARK_MODE: master
      SPARK_MASTER_PORT: "7077"
      SPARK_MASTER_WEBUI_PORT: "8080"
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
    ports:
      - "8080:8080"  # Spark Master UI
      - "7077:7077"  # Spark Master RPC
    networks: [ tinylake ]

  spark-worker-1:
    image: bitnami/spark:3.5.1
    container_name: spark-worker-1
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 2G
      SPARK_WORKER_CORES: 2
    ports:
      - "8081:8081"  # Spark Worker UI
    networks: [ tinylake ]

  spark-worker-2:
    image: bitnami/spark:3.5.1
    container_name: spark-worker-2
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 2G
      SPARK_WORKER_CORES: 2
    ports:
      - "8082:8081"  # Spark Worker UI
    networks: [ tinylake ]

  doris-fe:
    image: apache/doris:fe-3.0.7
    container_name: doris-fe
    environment:
      FE_SERVERS: fe1:127.0.0.1:9010
      FE_ID: 1
    ports:
      - "8030:8030"  # FE Web UI
      - "9030:9030"  # MySQL port
      - "9010:9010"  # FE Thrift RPC
    volumes:
      - doris_fe_meta:/opt/apache-doris/fe/doris-meta
      - doris_fe_log:/opt/apache-doris/fe/log
    networks: [ tinylake ]

  doris-be:
    image: apache/doris:be-3.0.7
    container_name: doris-be
    depends_on:
      - doris-fe
    environment:
      FE_SERVERS: fe1:127.0.0.1:9010
      BE_ADDR: doris-be:9050
    ports:
      - "8040:8040"  # BE Web UI
    volumes:
      - doris_be_storage:/opt/apache-doris/be/storage
      - doris_be_log:/opt/apache-doris/be/log
    networks: [ tinylake ]
